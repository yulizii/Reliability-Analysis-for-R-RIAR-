sigma <- c(1, 1)
# 计算结果
result <- form(g, mean, sigma)
print(result)
library(devtools)
library(roxygen2)
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
library(riar)
set.seed(123)
g <- function(x) {
return(x[1]^2 + x[2]^2 - 3)
}
x <- cbind(
rnorm(n_samples, mean[1], sd[1]),  # x1
rnorm(n_samples, mean[2], sd[2])   # x2
)
svm_model=train_svm(x, g)
devtools::document()
devtools::build()
install.packages("C:/Users/Administrator/Documents/riar_1.0.tar.gz")
library(riar)
set.seed(123)
g <- function(x) {
return(x[1]^2 + x[2]^2 - 3)
}
x <- cbind(
rnorm(n_samples, mean[1], sd[1]),  # x1
rnorm(n_samples, mean[2], sd[2])   # x2
)
svm_model=train_svm(x, g)
# Example limit state function
g_example <- function(sample) {
return(sample[1] + sample[2] - 10)  # Example limit state function
}
# Example sample set
set.seed(123)
samples <- matrix(rnorm(1000), ncol = 2)  # Generate random samples
# Calculate failure probability
result <- MCS(samples, g_example)
print(result)
# Example limit state function
g_example <- function(sample) {
return(sample[1] + sample[2] - 3)  # Example limit state function
}
# Example sample set
set.seed(123)
samples <- matrix(rnorm(1000), ncol = 2)  # Generate random samples
# Calculate failure probability
result <- MCS(samples, g_example)
print(result)
library(riar)
set.seed(123)
x <- matrix(rnorm(1000), ncol = 2)
g <- function(x) {
return(x[1]^2 + x[2]^2 - 3)
}
x <- cbind(
rnorm(n_samples, mean[1], sd[1]),  # x1
rnorm(n_samples, mean[2], sd[2])   # x2
)
svm_model=train_svm(x, g)
library(riar)
set.seed(123)
x <- matrix(rnorm(1000), ncol = 2)
g <- function(x) {
return(x[1]^2 + x[2]^2 - 1)
}
x <- cbind(
rnorm(n_samples, mean[1], sd[1]),  # x1
rnorm(n_samples, mean[2], sd[2])   # x2
)
svm_model=train_svm(x, g)
apply(x, 1, g)
g_values <- apply(x, 1, g)  # Calculate g values for each row
# Generate labels
y <- ifelse(g_values <= 0, 1, 0)  # Failure event label is 1, non-failure label is 0
svm_model <- svm(x, as.factor(y), kernel = "radial")  # Use radial basis kernel
library(riar)
set.seed(123)
x <- matrix(rnorm(500), ncol = 2)
g <- function(x) {
return(x[1]^2 + x[2]^2 - 1)
}
x <- cbind(
rnorm(n_samples, mean[1], sd[1]),  # x1
rnorm(n_samples, mean[2], sd[2])   # x2
)
svm_model=train_svm(x, g)
g_values <- apply(x, 1, g)
y <- ifelse(g_values <= 0, 1, 0)
y
x
x <- matrix(rnorm(500), ncol = 2)
x
x
x <- cbind(
rnorm(n_samples, mean[1], sd[1]),  # x1
rnorm(n_samples, mean[2], sd[2])   # x2
)
x
library(riar)
set.seed(123)
x <- matrix(rnorm(500), ncol = 2)
g <- function(x) {
return(x[1]^2 + x[2]^2 - 1)
}
svm_model=train_svm(x, g)
predict_svm (svm_model, x, g)
# Example limit state function
g_example <- function(sample) {
return(sample[1] + sample[2] - 10)  # Example limit state function
}
# Example sample set
set.seed(123)
samples <- matrix(rnorm(1000), ncol = 2)  # Generate random samples
# Calculate failure probability
result <- MCS(samples, g_example)
print(result)
# Example limit state function
g_example <- function(sample) {
return(sample[1] + sample[2] - 2)  # Example limit state function
}
# Example sample set
set.seed(123)
samples <- matrix(rnorm(1000), ncol = 2)  # Generate random samples
# Calculate failure probability
result <- MCS(samples, g_example)
print(result)
devtools
devtools::document()
devtools::document()
devtools::document()
devtools::build('')
devtools::build()
install.packages("C:/Users/Administrator/Documents/riar_1.0.tar.gz")
library(riar)
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
x
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(Rcpp)
library(Rcpp)
# 定义极限状态函数
g <- function(x) {
x[1] + x[2] - 5
}
# 输入均值和标准差
mean <- c(5, 5)
sigma <- c(1, 1)
# 计算结果
result <- form(g, mean, sigma)
print(result)
library(Rcpp)
# 定义极限状态函数
g <- function(x) {
x[1] + x[2] - 5
}
# 输入均值和标准差
mean <- c(3, 2)
sigma <- c(1, 1)
# 计算结果
result <- form(g, mean, sigma)
print(result)
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
# Example limit state function
g_example <- function(sample) {
return(sample[1] + sample[2] - 2)  # Example limit state function
}
# Example sample set
set.seed(123)
samples <- matrix(rnorm(1000), ncol = 2)  # Generate random samples
# Calculate failure probability
result <- MCS(samples, g_example)
print(result)
train
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
x[1]
g_values <- apply(x, 1, g)
g_vectorized <- function(x) {
return(x[, 1]^2 + x[, 2]^2 - 3) # 直接操作矩阵
}
x <- matrix(rnorm(n_samples * 2), ncol = 2)
g_values <- g_vectorized(x) # 无需使用 apply
x <- matrix(rnorm(n_samples * 2), ncol = 2) # 生成一个包含两列的矩阵
g <- function(x) {
return(x[1]^2 + x[2]^2 - 3) # x 是长度为 2 的向量
}
g_values <- apply(x, 1, function(row) g(row)) # 按行传递每一行给 g 函数
> g_vectorized <- function(x) {
x <- matrix(rnorm(n_samples * 2), ncol = 2) # 生成一个包含两列的矩阵
g <- function(x) {
return(x[1]^2 + x[2]^2 - 3) # x 是长度为 2 的向量
}
g_values <- apply(x, 1, function(row) g(row)) # 按行传递每一行给 g 函数
x <- matrix(rnorm(n_samples * 2), ncol = 2) # 生成一个包含两列的矩阵
g <- function(x) {
return(x[1]^2 + x[2]^2 - 3) # x 是长度为 2 的向量
}
g_values <- apply(x, 1, function(row) g(row)) # 按行传递每一行给 g 函数
devtools::document()
devtools::build()
install.packages()
install.packages("C:/Users/Administrator/Documents/riar_1.0.tar.gz")
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
library(riar)
set.seed(123)
g <- function() {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(2*n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
g_values <- apply(x, 1, function(row) g(row)) # Calculate g values for each row
test_row <- c(1, 2)
print(g(test_row)) # 应该输出 1^2 + 2^2 - 3 = 2
# 定义 g 函数
g <- function(x) {
return(x[1]^2 + x[2]^2 - 3)
}
# 生成样本矩阵
x <- matrix(rnorm(500 * 2), ncol = 2)
# 使用 apply 计算 g_values
g_values <- apply(x, 1, function(row) g(row))
# 输出结果
print(g_values)
g_values <- apply(x, 1, function(row) g(row))
library(riar)
set.seed(123)
g <- function(x) {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(2*n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
results <- predict_svm(s_model, x, g)  # Predict failure probability and reliability index
library(riar)
set.seed(123)
g <- function(x) {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(2*n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
results <- predict_svm(svm_model, x, g)  # Predict failure probability and reliability index
print(results)  # Print the results
devtools::document()
devtools::build()
install.packages("C:/Users/Administrator/Documents/riar_1.0.tar.gz")
library(riar)
devtools::document()
devtools::build_vignettes()
pkgload::dev_help('predict_svm')
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build()
install.packages("C:/Users/Administrator/Documents/riar_1.0.tar.gz")
library(riar)
set.seed(123)
g <- function(x) {
return(x[1]^2 + x[2]^2 - 3)
}
n_samples <- 500  # Define the number of samples
x <- matrix(rnorm(2*n_samples), ncol = 2)
svm_model <- train_svm(x, g)  # Train the SVM model
results <- predict_svm(svm_model, x, g)  # Predict failure probability and reliability index
print(results)  # Print the results
# Example limit state function
g_example <- function(sample) {
return(sample[1] + sample[2] - 2)  # Example limit state function
}
# Example sample set
set.seed(123)
samples <- matrix(rnorm(1000), ncol = 2)  # Generate random samples
# Calculate failure probability
result <- MCS(samples, g_example)
print(result)
library(Rcpp)
# 定义极限状态函数
g <- function(x) {
x[1] + x[2] - 5
}
# 输入均值和标准差
mean <- c(3, 2)
sigma <- c(1, 1)
# 计算结果
result <- form(g, mean, sigma)
print(result)
# Example limit state function
g_example <- function(sample) {
return(sample[1] + sample[2] - 2)  # Example limit state function
}
# Example sample set
set.seed(123)
samples <- matrix(rnorm(1000), ncol = 2)  # Generate random samples
# Calculate failure probability
result <- MCS(samples, g_example)
print(result)
VignetteBuilder: knitr
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(devtools)
library(roxygen2)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::build()
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
## Assignment 2
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build()
install.packages("C:/Users/Administrator/Documents/riar_1.0.tar.gz")
git init
usethis::use_git_ignore()
usethis::use_git_ignore()
git init # initialization
Git-More-Shell...,
Git-More-Shell...,
---
title: "Homework-Compilation"
Git-More-Shell...,
Git-More-Shell...,
git init
git init
git init
git init
git init
git init
This vignette compiles the content of ten assignments.
### Example1
画一个100个随机点形成的散点图
vgit init
```{r}
git initgit init
git init
s<-matrix(runif(10*20),nrow=100,ncol=2)
plot(s,main="Hundred points",xlab="x",ylab="y")
